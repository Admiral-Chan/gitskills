过滤器用来格式化需要展示给用户的数据

在HTML中的模板绑定符号{{}}内通过 | 符号来调用过滤器。

在JavaScript代码中可以通过$filter来调用过滤器。

以HTML的形式使用过滤器时，如果需要传递参数给过滤器，只要在过滤器名字后面加冒号即可。如果有多个参数，可以在每个参数后面都加入冒号。


AngularJS提供的内置过滤器：
1、currecy：
	currecy过滤器可以将一个数值格式化为货币格式。用{{ 123 | currecy }}来讲123转化成货币格式。
	currecy过滤器允许我们自己设置货币符号。默认情况下会采用客户端所处区域的货币符号，但是也可以自定义货币符号。

2、date
	date过滤器可以将日期格式化成需要的格式。

{{ today | date:'medium' }} <!-- Aug 09, 2013 12:09:02 PM --> 
{{ today | date:'short' }} <!-- 8/9/1312:09PM -->
{{ today | date:'fullDate' }} <!-- Thursday, August 09, 2013 -->
{{ today | date:'longDate' }} <!-- August 09, 2013 -->
{{ today | date:'mediumDate' }}<!-- Aug 09, 2013 -->
{{ today | date:'shortDate' }} <!-- 8/9/13 -->
{{ today | date:'mediumTime' }}<!-- 12:09:02 PM -->
{{ today | date:'shortTime' }} <!-- 12:09 PM -->

1> 年份格式化
四位年份：{{ today | date:'yyyy' }} <!-- 2013 --> 
两位年份：{{ today | date:'yy' }} <!-- 13 --> 
一位年份：{{ today | date:'y' }} <!-- 2013 --> 

2> 月份格式化
英文月份：{{ today | date:'MMMM' }} <!-- August --> 
英文月份简写：{{ today | date:'MMM' }} <!-- Aug --> 
数字月份：{{ today |date:'MM' }} <!-- 08 --> 
一年中的第几个月份：{{ today |date:'M' }} <!-- 8 -->

3> 日期格式化
数字日期：{{ today|date:'dd' }} <!-- 09 --> 
一个月中的第几天：{{ today | date:'d' }} <!-- 9 --> 
英文星期：{{ today | date:'EEEE' }} <!-- Thursday --> 
英文星期简写：{{ today | date:'EEE' }} <!-- Thu --> 

4> 小时格式化
24小时制数字小时：{{today|date:'HH'}} <!--00--> 
一天中的第几个小时：{{today|date:'H'}} <!--0--> 
12小时制数字小时：{{today|date:'hh'}} <!--12--> 
上午或下午的第几个小时：{{today|date:'h'}} <!--12--> 

5> 分钟格式化
数字分钟数：{{ today | date:'mm' }} <!-- 09 --> 
一个小时中的第几分钟：{{ today | date:'m' }} <!-- 9 --> 

6> 秒数格式化
数字秒数：{{ today | date:'ss' }} <!-- 02 --> 
一分钟内的第几秒：{{ today | date:'s' }} <!-- 2 --> 
毫秒数：{{ today | date:'.sss' }} <!-- .995 --> 

7> 字符格式化
上下午标识：{{ today | date:'a' }} <!-- AM --> 
四位时区标识：{{ today | date:'Z' }} <!--- 0700 -->

下面是一些自定义日期格式的示例：
{{ today | date:'MMMd, y' }} <!-- Aug9, 2013 --> 
{{ today | date:'EEEE, d, M' }} <!-- Thursday, 9, 8--> 
{{ today | date:'hh:mm:ss.sss' }} <!-- 12:09:02.995 --> 

3、filter
	filter过滤器可以从给定数组中选择一个子集，并将其生成一个新数组返回。这个过滤器通常用来过滤需要进行展示的元素。
	这个过滤器的第一个参数可以时字符串、对象或是一个用来从数组中选择元素的函数。
	下面分情况介绍传入不同类型的参数：
	
	1>字符串
	返回所有包含这个字符串的元素。如果我们向返回不包含该字符串的元素，在参数前面加！符号。

	2>对象
	AngularJS会将待过滤对象的属性同这个对象中的同名属性进行比较，如果舒总值时字符串就会判断是否包含该字符串。如果我们希望对全部属性都进行对比，可以将$当作键名。

	3>对每一个元素都执行这个函数，返回非假值的元素会出现在新的数组中并返回。

	我们也可以给filter过滤器传入第二个参数，用来指定预期值同实际值进行比较的方式。

	第二个参数可以是以下三种情况之一：

	1>true
	用angular.equals(expected, actual)对两个值进行严格的比较。

	2>false
	进行区分大小写的子字符串比较

	3>函数
	运行这个函数，如果返回真值就接受这个元素。

4、json：json过滤器可以将一个JSON或JavaScript对象转换成字符串。

5、limitTo:limitTo过滤器会根据传入的参数生成一个新的数组或字符串，新的数组或字符串的长度取决于传入的参数，通过传入参数的正负值来控制从前面还是后面开始截取。
	如果传入的长度值大于被操作数组或字符串的长度，那么整个数组或字符串都会被返回。

6、lowercase：lowercase过滤器将字符串转为小写。

7、number：number过滤器将数字格式化成文本。它的第二个参数是可选的，用来控制小数点后截取的位数。
	如果传入了一个非数字字符，会返回空字符串。

8、orderBy：orderBy过滤器可以用表达式对指定的数组进行排序。

9、uppercase：uppercase过滤器可以将字符串转换成大写形式


