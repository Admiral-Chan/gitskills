内置指令：

一、基础 ng 属性指令

1、布尔属性
	当在AngularJS中使用动态数据绑定时，不能简单地将这个属性值设置为true或false，因为根据标准定义只有当这个属性不出现时，它的值才会为false。因此AngularJS提供了一组带有ng-前缀版本的布尔属性，通过运算表达式的值来决定在目标元素上时插入还是移除对应的属性。

	1> ng-disabled

	使用ng-disabled可以把disabled属性绑定到以下表单输入字段上：

	1) <input>(text|checkbox|radio|number|url|email|submit);
	2) <textarea>;
	3) <select>
	4) <button>

	2> ng-readonly

二、在指令中使用子作用域：指令会以父级作用域为原型生成子作用域，这种继承的机制可以创建一个隔离层，用来将需要协同工作的方法和数据模型对象放置在一起。

1、ng-app
	任何具有ng-app属性的DOM元素将被标记为$rootScope的起点。
	$rootScope是作用域链的起始点，任何嵌套在ng-app内的指令都会继承它。
	在JavaScript代码中通过run方法来访问$rootScope。

2、ng-controller
	内置指令ng-controller的作用是为嵌套在其中的指令创建一个子作用域，避免将所有操作和模型都定义在$rootScope上。用这个指令可以在一个DOM元素上放置控制器。

	ng-controller接受一个参数expression，这个参数是必须的。

	子$scope只是一个JavaScript对象，其中含有从父级$scope中通过原型继承得到的方法和属性，包括应用时问$rootScope。

	嵌套在ng-controller中的指令有访问新子$scope的权限，但是要牢记每个指令都应该遵守的和作用域相关规则。

	JavaScript对象要么是值复制要么是引用复制。字符串、数字和布尔星变量是值复制。数字、对象和函数则是引用复制。

3、ng-include
	使用ng-include可以加载、编译并包含外部HTML片段到当前的应用中。模板的URL被限制在与应用文档相同的域和协议下，可以通过白名单或包装成被信任的值来突破限制。更进一步，需要考虑跨域资源共享（Cross-Origin Resource Sharing，CORS）和同源规则（Same Origin Policy）来确保模板可以在任何浏览器中正常加载。例如，所有浏览器都不能进行跨域的请求，部分浏览器也不能访问file://协议的资源。

		在开发中，可以通过命令行命令chrome --allow-file-access-from-files来禁止CORS错误。只在紧急情况下使用这个方法。

	使用ng-include时AngularJS会自动创建一个子作用域。如果想要使用某个特定的作用域，例如ControllerA的作用域，必须在同一个DOM元素上添加ng-controller="ControllerA"指令，这样当模板加载完成后，不会像往常一样从外部作用域继承并创建一个新的子作用域
		如：
		<div ng-include="/myTemplateName.html"
			 ng-controller="MyController"
			 ng-init="name='World'">
			Hello {{ name }}
		</div>

4、ng-switch
	这个指令和ng-switch-when及on="propertyName"一起使用，可以在propertyName发生变化时渲染不同指令到视图中。

5、ng-view
	ng-view指令用来设置将被路由管理和放置在HTML中的视图的位置。

6、ng-if
	使用ng-if指令可以完全根据表达式的值在DOM中生成或移除一个元素。如果赋值给ng-if的表达式的值时false，那对应的元素将会从DOM中移除，否则对应元素的一个克隆将被重新插入DOM中。
	注：
	ng-if重新创建元素时用的是他们编译后的状态。如果ng-if内部的代码加载之后被Jquery修改过（例如用.addclass），那么当ng-if的表达式值为false时，这个DOM元素会被移除，表达式再次为true时这个元素及其内部的子元素会被重新插入DOM，此时这些元素的状态会是他们的原始状态，而不是他们上次被移除时的状态，也就是说无论用Jquery的.addclass添加什么类都不会存在。

7、ng-repeat
	ng-repeat用来遍历一个集合或为集合中的每个元素生成一个模板实例。集合中的每一个元素都会被赋予自己的模板和作用域。同时每个模板实例的作用域中都会暴露一些特殊的属性

	1> $index：遍历的进度（0~length-1）
	2> $first：当元素是遍历的第一个时值为true
	3> $middle：当元素处于第一个和最后元素之间时值为true
	4> $last：当元素是遍历的最后一个时值为true
	5> $even：当$index值是偶数时为true
	6> $odd：当$index值是奇数时为true

8、ng-init
	
	ng-init指令用来在指令被调用时设置内部作用域的初始化状态。

11、ng-clock

	除了使用ng-bind来避免未渲染元素闪烁，还可以在含有{{}}的元素上使用ng-block指令。

13、ng-model

	ng-model指令用来将input、select、textarea或自定义表单控件同包含他们的作用域中的属性进行绑定。它可以提供并处理表单验证功能，在元素上设置相关的CSS类（ng-valid、ng-invalid等），并负责在父表单中注册控件。

	它将当前作用域中运算表达式的值同给定的元素进行绑定。如果属性并不存在，它会隐式创建并将其添加到当前作用域中。

	我们应该始终用ngModel来绑定$scope上一个数据模型内的属性，而不是$scope上的属性，这可以避免在作用域后代作用域中发生属性覆盖。

16、ng-form

	ng-form用户在一个表单内部嵌套另一个表单。普通的HTML <form>变迁不允许嵌套，但ng-form可以；

	这意味着内部所有的子表单都合法时，外部的表单才会合法。这对于用ng-repeat动态创建表单时非常有用的。

	由于不能通过字符插值来给输入元素动态地生成name属性，所以需要将ng-form指令内魅族重复地输入字段都包含在一个外部表单元素内。

	下面地CSS类会根据表单地验证状态自动设置：

		1> 表单合法时设置 ng-valid；
		2> 表单不合法时设置 ng-invalid；
		3> 表单未进行修改时设置 ng-pristion；
		4> 表单进行过修改时设置 ng-dirty；

	Angular不会将表单提交到服务器，除非它指定了action属性。要指定提交表单时调用哪个JavaScript方法，使用下面两个指令中地一个。

		1> ng-submit： 在表单元素上使用。
		2> ng-click： 在第一个按钮或submit类型（input[type=submit]）